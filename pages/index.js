import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import Link from "next/link";
import ProductList from "../components/ProductList";
import { useEffect, useState } from "react";
import { onAuthStateChanged, signOut } from "firebase/auth";
import { useRouter } from "next/router";
import { auth, provider } from "../firebase";
import Header from "../components/Header";
import Categories from "../components/Categories";
import NewProduct from "../components/NewProduct";
import Search from "../components/Search";

export default function Home({ products }) {
  const [loggedUser, setLoggedUser] = useState(null);
  const [myProducts, setMyProducts] = useState(products);
  const [title, setTitle] = useState("");
  const [searchTerm, setSearchTerm] = useState("");
  const [description, setDescription] = useState("");
  const [category, setCategory] = useState("");
  const cats = products.map((p) => p.category);
  const categories = [...new Set(cats)];
  const router = useRouter();

  const logOut = () => {
    signOut(auth)
      .then(() => {
        // Sign-out successful.
      })
      .catch((error) => {
        // An error happened.
      });
  };
  useEffect(() => {
    onAuthStateChanged(auth, (user) => {
      if (user) {
        setLoggedUser(user);
        console.log(user.displayName, "is logged in");
        // User is signed in, see docs for a list of available properties
        // https://firebase.google.com/docs/reference/js/firebase.User
        const uid = user.uid;
        // ...
      } else {
        console.log("not logged in");
        router.push("/login");
        // User is signed out
        // ...
      }
    });
    /*       if (user) {
        setNewUser(user)
        console.log(user);
        // User is signed in, see docs for a list of available properties
        // https://firebase.google.com/docs/reference/js/firebase.User
        const uid = user.uid;
        // ...
      } else {
        //router.push('/login');
        // User is signed out
        // ...
      } */
  }, []);

  const filterCat = (ele) => {
    const filteredProducts = products.filter(
      (product) => product.category === ele
    );
    setMyProducts(filteredProducts);
  };

  const addProduct = () => {
    const rate = { rate: 4.2 };
    const newProduct = {
      title,
      description,
      category,
      image: "https://picsum.photos/seed/picsum/200/300",
      rating: rate,
      id: products.length + 1,
    };
    const newProducts = [...myProducts, newProduct];
    setMyProducts(newProducts);
    setCategory("");
    setDescription("");
    setTitle("");
  };
  const deleteProduct = () => {};
  const searchProduct = () => {};
  const searchHandler = () => {
    if (!searchTerm) {
      return;
    }
    let productsArr = [];
    products.map((product) => {
      if (
        product.title.includes(searchTerm) ||
        product.category.includes(searchTerm) ||
        product.description.includes(searchTerm)
      ) {
        productsArr.push(product);
      }
    });
    if (productsArr.length > 0) setMyProducts(productsArr);
    else alert("no products found");
  };
  return (
    loggedUser && (
      <div className={styles.container}>
        <Head>
          <title>Products catalog</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <Header loggedUser={loggedUser} logOut={logOut} />
        <Categories
          filterCat={filterCat}
          products={products}
          categories={categories}
          myProducts={myProducts}
          setMyProducts={setMyProducts}
        />
        <NewProduct
          title={title}
          setTitle={setTitle}
          description={description}
          setDescription={setDescription}
          setCategory={setCategory}
          category={category}
          addProduct={addProduct}
        />
        <Search
          searchTerm={searchTerm}
          setSearchTerm={setSearchTerm}
          searchHandler={searchHandler}
        />
        <ProductList products={myProducts} />
      </div>
    )
  );
}
export const getStaticProps = async () => {
  const server = "https://fakestoreapi.com/products/";
  const res = await fetch(`${server}`);
  const products = await res.json();

  return {
    props: {
      products,
    },
  };
};
